/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type TeamInfo = ContractEventLog<{
  teamId: string;
  amountWonInWei: string;
  amountPaidInWei: string;
  0: string;
  1: string;
  2: string;
}>;

export interface SeasonLeague extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): SeasonLeague;
  clone(): SeasonLeague;
  methods: {
    addTeam(_teamId: number | string): PayableTransactionObject<void>;

    awards(arg0: number | string): NonPayableTransactionObject<string>;

    calculatePercentage(
      _total: number | string,
      _percent: number | string
    ): NonPayableTransactionObject<string>;

    commish(): NonPayableTransactionObject<string>;

    currentTeams(): NonPayableTransactionObject<string>;

    getAllTeams(): NonPayableTransactionObject<void>;

    isSeasonDone(): NonPayableTransactionObject<boolean>;

    maxTeams(): NonPayableTransactionObject<string>;

    minBuyInWei(): NonPayableTransactionObject<string>;

    numAwards(): NonPayableTransactionObject<string>;

    teamIds(arg0: number | string): NonPayableTransactionObject<string>;

    teams(
      arg0: number | string
    ): NonPayableTransactionObject<{
      payoutAddress: string;
      amountWonInWei: string;
      amountPaidInWei: string;
      0: string;
      1: string;
      2: string;
    }>;

    withdrawAllMoney(_to: string): NonPayableTransactionObject<void>;

    yahooLeagueId(): NonPayableTransactionObject<string>;

    addSeasonDetails(
      _percents: (number | string)[]
    ): NonPayableTransactionObject<void>;

    payOutSeason(
      _winners: (number | string)[]
    ): NonPayableTransactionObject<void>;
  };
  events: {
    TeamInfo(cb?: Callback<TeamInfo>): EventEmitter;
    TeamInfo(options?: EventOptions, cb?: Callback<TeamInfo>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "TeamInfo", cb: Callback<TeamInfo>): void;
  once(event: "TeamInfo", options: EventOptions, cb: Callback<TeamInfo>): void;
}

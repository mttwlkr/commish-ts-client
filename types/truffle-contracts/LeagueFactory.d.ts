/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface LeagueFactoryContract
  extends Truffle.Contract<LeagueFactoryInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<LeagueFactoryInstance>;
}

type AllEvents = never;

export interface LeagueFactoryInstance extends Truffle.ContractInstance {
  seasonLeagues(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  weeklyLeagues(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  createSeasonLeague: {
    (
      _yahooLeagueId: number | BN | string,
      _minBuyInWei: number | BN | string,
      _teamLimit: number | BN | string,
      _percents: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _yahooLeagueId: number | BN | string,
      _minBuyInWei: number | BN | string,
      _teamLimit: number | BN | string,
      _percents: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _yahooLeagueId: number | BN | string,
      _minBuyInWei: number | BN | string,
      _teamLimit: number | BN | string,
      _percents: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _yahooLeagueId: number | BN | string,
      _minBuyInWei: number | BN | string,
      _teamLimit: number | BN | string,
      _percents: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  createWeeklyLeague: {
    (
      _yahooLeagueId: number | BN | string,
      _minBuyInWei: number | BN | string,
      _totalWeeks: number | BN | string,
      _teamLimit: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _yahooLeagueId: number | BN | string,
      _minBuyInWei: number | BN | string,
      _totalWeeks: number | BN | string,
      _teamLimit: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _yahooLeagueId: number | BN | string,
      _minBuyInWei: number | BN | string,
      _totalWeeks: number | BN | string,
      _teamLimit: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _yahooLeagueId: number | BN | string,
      _minBuyInWei: number | BN | string,
      _totalWeeks: number | BN | string,
      _teamLimit: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    seasonLeagues(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    weeklyLeagues(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    createSeasonLeague: {
      (
        _yahooLeagueId: number | BN | string,
        _minBuyInWei: number | BN | string,
        _teamLimit: number | BN | string,
        _percents: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _yahooLeagueId: number | BN | string,
        _minBuyInWei: number | BN | string,
        _teamLimit: number | BN | string,
        _percents: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _yahooLeagueId: number | BN | string,
        _minBuyInWei: number | BN | string,
        _teamLimit: number | BN | string,
        _percents: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _yahooLeagueId: number | BN | string,
        _minBuyInWei: number | BN | string,
        _teamLimit: number | BN | string,
        _percents: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    createWeeklyLeague: {
      (
        _yahooLeagueId: number | BN | string,
        _minBuyInWei: number | BN | string,
        _totalWeeks: number | BN | string,
        _teamLimit: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _yahooLeagueId: number | BN | string,
        _minBuyInWei: number | BN | string,
        _totalWeeks: number | BN | string,
        _teamLimit: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _yahooLeagueId: number | BN | string,
        _minBuyInWei: number | BN | string,
        _totalWeeks: number | BN | string,
        _teamLimit: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _yahooLeagueId: number | BN | string,
        _minBuyInWei: number | BN | string,
        _totalWeeks: number | BN | string,
        _teamLimit: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}

/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface WeeklyLeagueContract
  extends Truffle.Contract<WeeklyLeagueInstance> {
  "new"(
    _commish: string,
    _yahooLeagueId: number | BN | string,
    _minBuyInWei: number | BN | string,
    _maxTeams: number | BN | string,
    meta?: Truffle.TransactionDetails
  ): Promise<WeeklyLeagueInstance>;
}

export interface TeamInfo {
  name: "TeamInfo";
  args: {
    teamId: BN;
    amountWonInWei: BN;
    amountPaidInWei: BN;
    0: BN;
    1: BN;
    2: BN;
  };
}

type AllEvents = TeamInfo;

export interface WeeklyLeagueInstance extends Truffle.ContractInstance {
  addTeam: {
    (
      _teamId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _teamId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _teamId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _teamId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  calculatePercentage(
    _total: number | BN | string,
    _percent: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  commish(txDetails?: Truffle.TransactionDetails): Promise<string>;

  currentTeams(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  currentWeek(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getAllTeams: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  maxTeams(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  minBuyInWei(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  teamIds(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  teams(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, BN, BN]>;

  totalWeeks(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  withdrawAllMoney: {
    (_to: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(_to: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      _to: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _to: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  yahooLeagueId(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  addWeeklyDetails: {
    (
      _totalWeeks: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _totalWeeks: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _totalWeeks: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _totalWeeks: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  editTotalWeeks: {
    (
      _totalWeeks: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _totalWeeks: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _totalWeeks: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _totalWeeks: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  payOutWeek: {
    (
      _winningTeamId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _winningTeamId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _winningTeamId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _winningTeamId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    addTeam: {
      (
        _teamId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _teamId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _teamId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _teamId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    calculatePercentage(
      _total: number | BN | string,
      _percent: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    commish(txDetails?: Truffle.TransactionDetails): Promise<string>;

    currentTeams(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    currentWeek(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    getAllTeams: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    maxTeams(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    minBuyInWei(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    teamIds(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    teams(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[string, BN, BN]>;

    totalWeeks(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    withdrawAllMoney: {
      (_to: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(_to: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(
        _to: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _to: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    yahooLeagueId(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    addWeeklyDetails: {
      (
        _totalWeeks: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _totalWeeks: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _totalWeeks: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _totalWeeks: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    editTotalWeeks: {
      (
        _totalWeeks: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _totalWeeks: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _totalWeeks: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _totalWeeks: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    payOutWeek: {
      (
        _winningTeamId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _winningTeamId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _winningTeamId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _winningTeamId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
